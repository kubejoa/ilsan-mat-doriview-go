// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"ilsan/ent/store"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Store is the model entity for the Store schema.
type Store struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Etc holds the value of the "etc" field.
	Etc string `json:"etc,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdateAt holds the value of the "update_at" field.
	UpdateAt time.Time `json:"update_at,omitempty"`
	// Title holds the value of the "title" field.
	Title        string `json:"title,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Store) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case store.FieldID:
			values[i] = new(sql.NullInt64)
		case store.FieldEtc, store.FieldStatus, store.FieldTitle:
			values[i] = new(sql.NullString)
		case store.FieldCreatedAt, store.FieldUpdateAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Store fields.
func (s *Store) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case store.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case store.FieldEtc:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field etc", values[i])
			} else if value.Valid {
				s.Etc = value.String
			}
		case store.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				s.Status = value.String
			}
		case store.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		case store.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				s.UpdateAt = value.Time
			}
		case store.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				s.Title = value.String
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Store.
// This includes values selected through modifiers, order, etc.
func (s *Store) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// Update returns a builder for updating this Store.
// Note that you need to call Store.Unwrap() before calling this method if this Store
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Store) Update() *StoreUpdateOne {
	return NewStoreClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Store entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Store) Unwrap() *Store {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Store is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Store) String() string {
	var builder strings.Builder
	builder.WriteString("Store(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("etc=")
	builder.WriteString(s.Etc)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(s.Status)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_at=")
	builder.WriteString(s.UpdateAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(s.Title)
	builder.WriteByte(')')
	return builder.String()
}

// Stores is a parsable slice of Store.
type Stores []*Store
