// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ilsan/ent/storereview"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// StoreReviewCreate is the builder for creating a StoreReview entity.
type StoreReviewCreate struct {
	config
	mutation *StoreReviewMutation
	hooks    []Hook
}

// SetEtc sets the "etc" field.
func (src *StoreReviewCreate) SetEtc(s string) *StoreReviewCreate {
	src.mutation.SetEtc(s)
	return src
}

// SetStatus sets the "status" field.
func (src *StoreReviewCreate) SetStatus(s string) *StoreReviewCreate {
	src.mutation.SetStatus(s)
	return src
}

// SetCreatedAt sets the "created_at" field.
func (src *StoreReviewCreate) SetCreatedAt(t time.Time) *StoreReviewCreate {
	src.mutation.SetCreatedAt(t)
	return src
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (src *StoreReviewCreate) SetNillableCreatedAt(t *time.Time) *StoreReviewCreate {
	if t != nil {
		src.SetCreatedAt(*t)
	}
	return src
}

// SetUpdateAt sets the "update_at" field.
func (src *StoreReviewCreate) SetUpdateAt(t time.Time) *StoreReviewCreate {
	src.mutation.SetUpdateAt(t)
	return src
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (src *StoreReviewCreate) SetNillableUpdateAt(t *time.Time) *StoreReviewCreate {
	if t != nil {
		src.SetUpdateAt(*t)
	}
	return src
}

// SetVisitDay sets the "visit_day" field.
func (src *StoreReviewCreate) SetVisitDay(t time.Time) *StoreReviewCreate {
	src.mutation.SetVisitDay(t)
	return src
}

// SetScore sets the "score" field.
func (src *StoreReviewCreate) SetScore(f float64) *StoreReviewCreate {
	src.mutation.SetScore(f)
	return src
}

// SetComment sets the "comment" field.
func (src *StoreReviewCreate) SetComment(s string) *StoreReviewCreate {
	src.mutation.SetComment(s)
	return src
}

// Mutation returns the StoreReviewMutation object of the builder.
func (src *StoreReviewCreate) Mutation() *StoreReviewMutation {
	return src.mutation
}

// Save creates the StoreReview in the database.
func (src *StoreReviewCreate) Save(ctx context.Context) (*StoreReview, error) {
	src.defaults()
	return withHooks(ctx, src.sqlSave, src.mutation, src.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (src *StoreReviewCreate) SaveX(ctx context.Context) *StoreReview {
	v, err := src.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (src *StoreReviewCreate) Exec(ctx context.Context) error {
	_, err := src.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (src *StoreReviewCreate) ExecX(ctx context.Context) {
	if err := src.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (src *StoreReviewCreate) defaults() {
	if _, ok := src.mutation.CreatedAt(); !ok {
		v := storereview.DefaultCreatedAt()
		src.mutation.SetCreatedAt(v)
	}
	if _, ok := src.mutation.UpdateAt(); !ok {
		v := storereview.DefaultUpdateAt()
		src.mutation.SetUpdateAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (src *StoreReviewCreate) check() error {
	if _, ok := src.mutation.Etc(); !ok {
		return &ValidationError{Name: "etc", err: errors.New(`ent: missing required field "StoreReview.etc"`)}
	}
	if _, ok := src.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "StoreReview.status"`)}
	}
	if _, ok := src.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "StoreReview.created_at"`)}
	}
	if _, ok := src.mutation.UpdateAt(); !ok {
		return &ValidationError{Name: "update_at", err: errors.New(`ent: missing required field "StoreReview.update_at"`)}
	}
	if _, ok := src.mutation.VisitDay(); !ok {
		return &ValidationError{Name: "visit_day", err: errors.New(`ent: missing required field "StoreReview.visit_day"`)}
	}
	if _, ok := src.mutation.Score(); !ok {
		return &ValidationError{Name: "score", err: errors.New(`ent: missing required field "StoreReview.score"`)}
	}
	if _, ok := src.mutation.Comment(); !ok {
		return &ValidationError{Name: "comment", err: errors.New(`ent: missing required field "StoreReview.comment"`)}
	}
	return nil
}

func (src *StoreReviewCreate) sqlSave(ctx context.Context) (*StoreReview, error) {
	if err := src.check(); err != nil {
		return nil, err
	}
	_node, _spec := src.createSpec()
	if err := sqlgraph.CreateNode(ctx, src.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	src.mutation.id = &_node.ID
	src.mutation.done = true
	return _node, nil
}

func (src *StoreReviewCreate) createSpec() (*StoreReview, *sqlgraph.CreateSpec) {
	var (
		_node = &StoreReview{config: src.config}
		_spec = sqlgraph.NewCreateSpec(storereview.Table, sqlgraph.NewFieldSpec(storereview.FieldID, field.TypeInt))
	)
	if value, ok := src.mutation.Etc(); ok {
		_spec.SetField(storereview.FieldEtc, field.TypeString, value)
		_node.Etc = value
	}
	if value, ok := src.mutation.Status(); ok {
		_spec.SetField(storereview.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := src.mutation.CreatedAt(); ok {
		_spec.SetField(storereview.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := src.mutation.UpdateAt(); ok {
		_spec.SetField(storereview.FieldUpdateAt, field.TypeTime, value)
		_node.UpdateAt = value
	}
	if value, ok := src.mutation.VisitDay(); ok {
		_spec.SetField(storereview.FieldVisitDay, field.TypeTime, value)
		_node.VisitDay = value
	}
	if value, ok := src.mutation.Score(); ok {
		_spec.SetField(storereview.FieldScore, field.TypeFloat64, value)
		_node.Score = value
	}
	if value, ok := src.mutation.Comment(); ok {
		_spec.SetField(storereview.FieldComment, field.TypeString, value)
		_node.Comment = value
	}
	return _node, _spec
}

// StoreReviewCreateBulk is the builder for creating many StoreReview entities in bulk.
type StoreReviewCreateBulk struct {
	config
	err      error
	builders []*StoreReviewCreate
}

// Save creates the StoreReview entities in the database.
func (srcb *StoreReviewCreateBulk) Save(ctx context.Context) ([]*StoreReview, error) {
	if srcb.err != nil {
		return nil, srcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(srcb.builders))
	nodes := make([]*StoreReview, len(srcb.builders))
	mutators := make([]Mutator, len(srcb.builders))
	for i := range srcb.builders {
		func(i int, root context.Context) {
			builder := srcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StoreReviewMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, srcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, srcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, srcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (srcb *StoreReviewCreateBulk) SaveX(ctx context.Context) []*StoreReview {
	v, err := srcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (srcb *StoreReviewCreateBulk) Exec(ctx context.Context) error {
	_, err := srcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (srcb *StoreReviewCreateBulk) ExecX(ctx context.Context) {
	if err := srcb.Exec(ctx); err != nil {
		panic(err)
	}
}
