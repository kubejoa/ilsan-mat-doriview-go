// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ilsan/ent/menureview"
	"ilsan/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MenuReviewUpdate is the builder for updating MenuReview entities.
type MenuReviewUpdate struct {
	config
	hooks    []Hook
	mutation *MenuReviewMutation
}

// Where appends a list predicates to the MenuReviewUpdate builder.
func (mru *MenuReviewUpdate) Where(ps ...predicate.MenuReview) *MenuReviewUpdate {
	mru.mutation.Where(ps...)
	return mru
}

// SetEtc sets the "etc" field.
func (mru *MenuReviewUpdate) SetEtc(s string) *MenuReviewUpdate {
	mru.mutation.SetEtc(s)
	return mru
}

// SetNillableEtc sets the "etc" field if the given value is not nil.
func (mru *MenuReviewUpdate) SetNillableEtc(s *string) *MenuReviewUpdate {
	if s != nil {
		mru.SetEtc(*s)
	}
	return mru
}

// SetStatus sets the "status" field.
func (mru *MenuReviewUpdate) SetStatus(s string) *MenuReviewUpdate {
	mru.mutation.SetStatus(s)
	return mru
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mru *MenuReviewUpdate) SetNillableStatus(s *string) *MenuReviewUpdate {
	if s != nil {
		mru.SetStatus(*s)
	}
	return mru
}

// SetCreatedAt sets the "created_at" field.
func (mru *MenuReviewUpdate) SetCreatedAt(t time.Time) *MenuReviewUpdate {
	mru.mutation.SetCreatedAt(t)
	return mru
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mru *MenuReviewUpdate) SetNillableCreatedAt(t *time.Time) *MenuReviewUpdate {
	if t != nil {
		mru.SetCreatedAt(*t)
	}
	return mru
}

// SetUpdateAt sets the "update_at" field.
func (mru *MenuReviewUpdate) SetUpdateAt(t time.Time) *MenuReviewUpdate {
	mru.mutation.SetUpdateAt(t)
	return mru
}

// SetScore sets the "score" field.
func (mru *MenuReviewUpdate) SetScore(i int) *MenuReviewUpdate {
	mru.mutation.ResetScore()
	mru.mutation.SetScore(i)
	return mru
}

// SetNillableScore sets the "score" field if the given value is not nil.
func (mru *MenuReviewUpdate) SetNillableScore(i *int) *MenuReviewUpdate {
	if i != nil {
		mru.SetScore(*i)
	}
	return mru
}

// AddScore adds i to the "score" field.
func (mru *MenuReviewUpdate) AddScore(i int) *MenuReviewUpdate {
	mru.mutation.AddScore(i)
	return mru
}

// SetComment sets the "comment" field.
func (mru *MenuReviewUpdate) SetComment(s string) *MenuReviewUpdate {
	mru.mutation.SetComment(s)
	return mru
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (mru *MenuReviewUpdate) SetNillableComment(s *string) *MenuReviewUpdate {
	if s != nil {
		mru.SetComment(*s)
	}
	return mru
}

// SetCooltime sets the "cooltime" field.
func (mru *MenuReviewUpdate) SetCooltime(i int) *MenuReviewUpdate {
	mru.mutation.ResetCooltime()
	mru.mutation.SetCooltime(i)
	return mru
}

// SetNillableCooltime sets the "cooltime" field if the given value is not nil.
func (mru *MenuReviewUpdate) SetNillableCooltime(i *int) *MenuReviewUpdate {
	if i != nil {
		mru.SetCooltime(*i)
	}
	return mru
}

// AddCooltime adds i to the "cooltime" field.
func (mru *MenuReviewUpdate) AddCooltime(i int) *MenuReviewUpdate {
	mru.mutation.AddCooltime(i)
	return mru
}

// SetPrice sets the "price" field.
func (mru *MenuReviewUpdate) SetPrice(i int) *MenuReviewUpdate {
	mru.mutation.ResetPrice()
	mru.mutation.SetPrice(i)
	return mru
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (mru *MenuReviewUpdate) SetNillablePrice(i *int) *MenuReviewUpdate {
	if i != nil {
		mru.SetPrice(*i)
	}
	return mru
}

// AddPrice adds i to the "price" field.
func (mru *MenuReviewUpdate) AddPrice(i int) *MenuReviewUpdate {
	mru.mutation.AddPrice(i)
	return mru
}

// Mutation returns the MenuReviewMutation object of the builder.
func (mru *MenuReviewUpdate) Mutation() *MenuReviewMutation {
	return mru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mru *MenuReviewUpdate) Save(ctx context.Context) (int, error) {
	mru.defaults()
	return withHooks(ctx, mru.sqlSave, mru.mutation, mru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mru *MenuReviewUpdate) SaveX(ctx context.Context) int {
	affected, err := mru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mru *MenuReviewUpdate) Exec(ctx context.Context) error {
	_, err := mru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mru *MenuReviewUpdate) ExecX(ctx context.Context) {
	if err := mru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mru *MenuReviewUpdate) defaults() {
	if _, ok := mru.mutation.UpdateAt(); !ok {
		v := menureview.UpdateDefaultUpdateAt()
		mru.mutation.SetUpdateAt(v)
	}
}

func (mru *MenuReviewUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(menureview.Table, menureview.Columns, sqlgraph.NewFieldSpec(menureview.FieldID, field.TypeInt))
	if ps := mru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mru.mutation.Etc(); ok {
		_spec.SetField(menureview.FieldEtc, field.TypeString, value)
	}
	if value, ok := mru.mutation.Status(); ok {
		_spec.SetField(menureview.FieldStatus, field.TypeString, value)
	}
	if value, ok := mru.mutation.CreatedAt(); ok {
		_spec.SetField(menureview.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := mru.mutation.UpdateAt(); ok {
		_spec.SetField(menureview.FieldUpdateAt, field.TypeTime, value)
	}
	if value, ok := mru.mutation.Score(); ok {
		_spec.SetField(menureview.FieldScore, field.TypeInt, value)
	}
	if value, ok := mru.mutation.AddedScore(); ok {
		_spec.AddField(menureview.FieldScore, field.TypeInt, value)
	}
	if value, ok := mru.mutation.Comment(); ok {
		_spec.SetField(menureview.FieldComment, field.TypeString, value)
	}
	if value, ok := mru.mutation.Cooltime(); ok {
		_spec.SetField(menureview.FieldCooltime, field.TypeInt, value)
	}
	if value, ok := mru.mutation.AddedCooltime(); ok {
		_spec.AddField(menureview.FieldCooltime, field.TypeInt, value)
	}
	if value, ok := mru.mutation.Price(); ok {
		_spec.SetField(menureview.FieldPrice, field.TypeInt, value)
	}
	if value, ok := mru.mutation.AddedPrice(); ok {
		_spec.AddField(menureview.FieldPrice, field.TypeInt, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{menureview.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mru.mutation.done = true
	return n, nil
}

// MenuReviewUpdateOne is the builder for updating a single MenuReview entity.
type MenuReviewUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MenuReviewMutation
}

// SetEtc sets the "etc" field.
func (mruo *MenuReviewUpdateOne) SetEtc(s string) *MenuReviewUpdateOne {
	mruo.mutation.SetEtc(s)
	return mruo
}

// SetNillableEtc sets the "etc" field if the given value is not nil.
func (mruo *MenuReviewUpdateOne) SetNillableEtc(s *string) *MenuReviewUpdateOne {
	if s != nil {
		mruo.SetEtc(*s)
	}
	return mruo
}

// SetStatus sets the "status" field.
func (mruo *MenuReviewUpdateOne) SetStatus(s string) *MenuReviewUpdateOne {
	mruo.mutation.SetStatus(s)
	return mruo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mruo *MenuReviewUpdateOne) SetNillableStatus(s *string) *MenuReviewUpdateOne {
	if s != nil {
		mruo.SetStatus(*s)
	}
	return mruo
}

// SetCreatedAt sets the "created_at" field.
func (mruo *MenuReviewUpdateOne) SetCreatedAt(t time.Time) *MenuReviewUpdateOne {
	mruo.mutation.SetCreatedAt(t)
	return mruo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mruo *MenuReviewUpdateOne) SetNillableCreatedAt(t *time.Time) *MenuReviewUpdateOne {
	if t != nil {
		mruo.SetCreatedAt(*t)
	}
	return mruo
}

// SetUpdateAt sets the "update_at" field.
func (mruo *MenuReviewUpdateOne) SetUpdateAt(t time.Time) *MenuReviewUpdateOne {
	mruo.mutation.SetUpdateAt(t)
	return mruo
}

// SetScore sets the "score" field.
func (mruo *MenuReviewUpdateOne) SetScore(i int) *MenuReviewUpdateOne {
	mruo.mutation.ResetScore()
	mruo.mutation.SetScore(i)
	return mruo
}

// SetNillableScore sets the "score" field if the given value is not nil.
func (mruo *MenuReviewUpdateOne) SetNillableScore(i *int) *MenuReviewUpdateOne {
	if i != nil {
		mruo.SetScore(*i)
	}
	return mruo
}

// AddScore adds i to the "score" field.
func (mruo *MenuReviewUpdateOne) AddScore(i int) *MenuReviewUpdateOne {
	mruo.mutation.AddScore(i)
	return mruo
}

// SetComment sets the "comment" field.
func (mruo *MenuReviewUpdateOne) SetComment(s string) *MenuReviewUpdateOne {
	mruo.mutation.SetComment(s)
	return mruo
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (mruo *MenuReviewUpdateOne) SetNillableComment(s *string) *MenuReviewUpdateOne {
	if s != nil {
		mruo.SetComment(*s)
	}
	return mruo
}

// SetCooltime sets the "cooltime" field.
func (mruo *MenuReviewUpdateOne) SetCooltime(i int) *MenuReviewUpdateOne {
	mruo.mutation.ResetCooltime()
	mruo.mutation.SetCooltime(i)
	return mruo
}

// SetNillableCooltime sets the "cooltime" field if the given value is not nil.
func (mruo *MenuReviewUpdateOne) SetNillableCooltime(i *int) *MenuReviewUpdateOne {
	if i != nil {
		mruo.SetCooltime(*i)
	}
	return mruo
}

// AddCooltime adds i to the "cooltime" field.
func (mruo *MenuReviewUpdateOne) AddCooltime(i int) *MenuReviewUpdateOne {
	mruo.mutation.AddCooltime(i)
	return mruo
}

// SetPrice sets the "price" field.
func (mruo *MenuReviewUpdateOne) SetPrice(i int) *MenuReviewUpdateOne {
	mruo.mutation.ResetPrice()
	mruo.mutation.SetPrice(i)
	return mruo
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (mruo *MenuReviewUpdateOne) SetNillablePrice(i *int) *MenuReviewUpdateOne {
	if i != nil {
		mruo.SetPrice(*i)
	}
	return mruo
}

// AddPrice adds i to the "price" field.
func (mruo *MenuReviewUpdateOne) AddPrice(i int) *MenuReviewUpdateOne {
	mruo.mutation.AddPrice(i)
	return mruo
}

// Mutation returns the MenuReviewMutation object of the builder.
func (mruo *MenuReviewUpdateOne) Mutation() *MenuReviewMutation {
	return mruo.mutation
}

// Where appends a list predicates to the MenuReviewUpdate builder.
func (mruo *MenuReviewUpdateOne) Where(ps ...predicate.MenuReview) *MenuReviewUpdateOne {
	mruo.mutation.Where(ps...)
	return mruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mruo *MenuReviewUpdateOne) Select(field string, fields ...string) *MenuReviewUpdateOne {
	mruo.fields = append([]string{field}, fields...)
	return mruo
}

// Save executes the query and returns the updated MenuReview entity.
func (mruo *MenuReviewUpdateOne) Save(ctx context.Context) (*MenuReview, error) {
	mruo.defaults()
	return withHooks(ctx, mruo.sqlSave, mruo.mutation, mruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mruo *MenuReviewUpdateOne) SaveX(ctx context.Context) *MenuReview {
	node, err := mruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mruo *MenuReviewUpdateOne) Exec(ctx context.Context) error {
	_, err := mruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mruo *MenuReviewUpdateOne) ExecX(ctx context.Context) {
	if err := mruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mruo *MenuReviewUpdateOne) defaults() {
	if _, ok := mruo.mutation.UpdateAt(); !ok {
		v := menureview.UpdateDefaultUpdateAt()
		mruo.mutation.SetUpdateAt(v)
	}
}

func (mruo *MenuReviewUpdateOne) sqlSave(ctx context.Context) (_node *MenuReview, err error) {
	_spec := sqlgraph.NewUpdateSpec(menureview.Table, menureview.Columns, sqlgraph.NewFieldSpec(menureview.FieldID, field.TypeInt))
	id, ok := mruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MenuReview.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, menureview.FieldID)
		for _, f := range fields {
			if !menureview.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != menureview.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mruo.mutation.Etc(); ok {
		_spec.SetField(menureview.FieldEtc, field.TypeString, value)
	}
	if value, ok := mruo.mutation.Status(); ok {
		_spec.SetField(menureview.FieldStatus, field.TypeString, value)
	}
	if value, ok := mruo.mutation.CreatedAt(); ok {
		_spec.SetField(menureview.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := mruo.mutation.UpdateAt(); ok {
		_spec.SetField(menureview.FieldUpdateAt, field.TypeTime, value)
	}
	if value, ok := mruo.mutation.Score(); ok {
		_spec.SetField(menureview.FieldScore, field.TypeInt, value)
	}
	if value, ok := mruo.mutation.AddedScore(); ok {
		_spec.AddField(menureview.FieldScore, field.TypeInt, value)
	}
	if value, ok := mruo.mutation.Comment(); ok {
		_spec.SetField(menureview.FieldComment, field.TypeString, value)
	}
	if value, ok := mruo.mutation.Cooltime(); ok {
		_spec.SetField(menureview.FieldCooltime, field.TypeInt, value)
	}
	if value, ok := mruo.mutation.AddedCooltime(); ok {
		_spec.AddField(menureview.FieldCooltime, field.TypeInt, value)
	}
	if value, ok := mruo.mutation.Price(); ok {
		_spec.SetField(menureview.FieldPrice, field.TypeInt, value)
	}
	if value, ok := mruo.mutation.AddedPrice(); ok {
		_spec.AddField(menureview.FieldPrice, field.TypeInt, value)
	}
	_node = &MenuReview{config: mruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{menureview.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mruo.mutation.done = true
	return _node, nil
}
