// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ilsan/ent/predicate"
	"ilsan/ent/store"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// StoreUpdate is the builder for updating Store entities.
type StoreUpdate struct {
	config
	hooks    []Hook
	mutation *StoreMutation
}

// Where appends a list predicates to the StoreUpdate builder.
func (su *StoreUpdate) Where(ps ...predicate.Store) *StoreUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetEtc sets the "etc" field.
func (su *StoreUpdate) SetEtc(s string) *StoreUpdate {
	su.mutation.SetEtc(s)
	return su
}

// SetNillableEtc sets the "etc" field if the given value is not nil.
func (su *StoreUpdate) SetNillableEtc(s *string) *StoreUpdate {
	if s != nil {
		su.SetEtc(*s)
	}
	return su
}

// SetStatus sets the "status" field.
func (su *StoreUpdate) SetStatus(s string) *StoreUpdate {
	su.mutation.SetStatus(s)
	return su
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (su *StoreUpdate) SetNillableStatus(s *string) *StoreUpdate {
	if s != nil {
		su.SetStatus(*s)
	}
	return su
}

// SetCreatedAt sets the "created_at" field.
func (su *StoreUpdate) SetCreatedAt(t time.Time) *StoreUpdate {
	su.mutation.SetCreatedAt(t)
	return su
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (su *StoreUpdate) SetNillableCreatedAt(t *time.Time) *StoreUpdate {
	if t != nil {
		su.SetCreatedAt(*t)
	}
	return su
}

// SetUpdateAt sets the "update_at" field.
func (su *StoreUpdate) SetUpdateAt(t time.Time) *StoreUpdate {
	su.mutation.SetUpdateAt(t)
	return su
}

// SetTitle sets the "title" field.
func (su *StoreUpdate) SetTitle(s string) *StoreUpdate {
	su.mutation.SetTitle(s)
	return su
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (su *StoreUpdate) SetNillableTitle(s *string) *StoreUpdate {
	if s != nil {
		su.SetTitle(*s)
	}
	return su
}

// Mutation returns the StoreMutation object of the builder.
func (su *StoreUpdate) Mutation() *StoreMutation {
	return su.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *StoreUpdate) Save(ctx context.Context) (int, error) {
	su.defaults()
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *StoreUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *StoreUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *StoreUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *StoreUpdate) defaults() {
	if _, ok := su.mutation.UpdateAt(); !ok {
		v := store.UpdateDefaultUpdateAt()
		su.mutation.SetUpdateAt(v)
	}
}

func (su *StoreUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(store.Table, store.Columns, sqlgraph.NewFieldSpec(store.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Etc(); ok {
		_spec.SetField(store.FieldEtc, field.TypeString, value)
	}
	if value, ok := su.mutation.Status(); ok {
		_spec.SetField(store.FieldStatus, field.TypeString, value)
	}
	if value, ok := su.mutation.CreatedAt(); ok {
		_spec.SetField(store.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := su.mutation.UpdateAt(); ok {
		_spec.SetField(store.FieldUpdateAt, field.TypeTime, value)
	}
	if value, ok := su.mutation.Title(); ok {
		_spec.SetField(store.FieldTitle, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{store.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// StoreUpdateOne is the builder for updating a single Store entity.
type StoreUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StoreMutation
}

// SetEtc sets the "etc" field.
func (suo *StoreUpdateOne) SetEtc(s string) *StoreUpdateOne {
	suo.mutation.SetEtc(s)
	return suo
}

// SetNillableEtc sets the "etc" field if the given value is not nil.
func (suo *StoreUpdateOne) SetNillableEtc(s *string) *StoreUpdateOne {
	if s != nil {
		suo.SetEtc(*s)
	}
	return suo
}

// SetStatus sets the "status" field.
func (suo *StoreUpdateOne) SetStatus(s string) *StoreUpdateOne {
	suo.mutation.SetStatus(s)
	return suo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (suo *StoreUpdateOne) SetNillableStatus(s *string) *StoreUpdateOne {
	if s != nil {
		suo.SetStatus(*s)
	}
	return suo
}

// SetCreatedAt sets the "created_at" field.
func (suo *StoreUpdateOne) SetCreatedAt(t time.Time) *StoreUpdateOne {
	suo.mutation.SetCreatedAt(t)
	return suo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (suo *StoreUpdateOne) SetNillableCreatedAt(t *time.Time) *StoreUpdateOne {
	if t != nil {
		suo.SetCreatedAt(*t)
	}
	return suo
}

// SetUpdateAt sets the "update_at" field.
func (suo *StoreUpdateOne) SetUpdateAt(t time.Time) *StoreUpdateOne {
	suo.mutation.SetUpdateAt(t)
	return suo
}

// SetTitle sets the "title" field.
func (suo *StoreUpdateOne) SetTitle(s string) *StoreUpdateOne {
	suo.mutation.SetTitle(s)
	return suo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (suo *StoreUpdateOne) SetNillableTitle(s *string) *StoreUpdateOne {
	if s != nil {
		suo.SetTitle(*s)
	}
	return suo
}

// Mutation returns the StoreMutation object of the builder.
func (suo *StoreUpdateOne) Mutation() *StoreMutation {
	return suo.mutation
}

// Where appends a list predicates to the StoreUpdate builder.
func (suo *StoreUpdateOne) Where(ps ...predicate.Store) *StoreUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *StoreUpdateOne) Select(field string, fields ...string) *StoreUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Store entity.
func (suo *StoreUpdateOne) Save(ctx context.Context) (*Store, error) {
	suo.defaults()
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *StoreUpdateOne) SaveX(ctx context.Context) *Store {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *StoreUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *StoreUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *StoreUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdateAt(); !ok {
		v := store.UpdateDefaultUpdateAt()
		suo.mutation.SetUpdateAt(v)
	}
}

func (suo *StoreUpdateOne) sqlSave(ctx context.Context) (_node *Store, err error) {
	_spec := sqlgraph.NewUpdateSpec(store.Table, store.Columns, sqlgraph.NewFieldSpec(store.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Store.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, store.FieldID)
		for _, f := range fields {
			if !store.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != store.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Etc(); ok {
		_spec.SetField(store.FieldEtc, field.TypeString, value)
	}
	if value, ok := suo.mutation.Status(); ok {
		_spec.SetField(store.FieldStatus, field.TypeString, value)
	}
	if value, ok := suo.mutation.CreatedAt(); ok {
		_spec.SetField(store.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := suo.mutation.UpdateAt(); ok {
		_spec.SetField(store.FieldUpdateAt, field.TypeTime, value)
	}
	if value, ok := suo.mutation.Title(); ok {
		_spec.SetField(store.FieldTitle, field.TypeString, value)
	}
	_node = &Store{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{store.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
