// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ilsan/ent/menureview"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MenuReviewCreate is the builder for creating a MenuReview entity.
type MenuReviewCreate struct {
	config
	mutation *MenuReviewMutation
	hooks    []Hook
}

// SetEtc sets the "etc" field.
func (mrc *MenuReviewCreate) SetEtc(s string) *MenuReviewCreate {
	mrc.mutation.SetEtc(s)
	return mrc
}

// SetStatus sets the "status" field.
func (mrc *MenuReviewCreate) SetStatus(s string) *MenuReviewCreate {
	mrc.mutation.SetStatus(s)
	return mrc
}

// SetCreatedAt sets the "created_at" field.
func (mrc *MenuReviewCreate) SetCreatedAt(t time.Time) *MenuReviewCreate {
	mrc.mutation.SetCreatedAt(t)
	return mrc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mrc *MenuReviewCreate) SetNillableCreatedAt(t *time.Time) *MenuReviewCreate {
	if t != nil {
		mrc.SetCreatedAt(*t)
	}
	return mrc
}

// SetUpdateAt sets the "update_at" field.
func (mrc *MenuReviewCreate) SetUpdateAt(t time.Time) *MenuReviewCreate {
	mrc.mutation.SetUpdateAt(t)
	return mrc
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (mrc *MenuReviewCreate) SetNillableUpdateAt(t *time.Time) *MenuReviewCreate {
	if t != nil {
		mrc.SetUpdateAt(*t)
	}
	return mrc
}

// SetScore sets the "score" field.
func (mrc *MenuReviewCreate) SetScore(i int) *MenuReviewCreate {
	mrc.mutation.SetScore(i)
	return mrc
}

// SetComment sets the "comment" field.
func (mrc *MenuReviewCreate) SetComment(s string) *MenuReviewCreate {
	mrc.mutation.SetComment(s)
	return mrc
}

// SetCooltime sets the "cooltime" field.
func (mrc *MenuReviewCreate) SetCooltime(i int) *MenuReviewCreate {
	mrc.mutation.SetCooltime(i)
	return mrc
}

// SetPrice sets the "price" field.
func (mrc *MenuReviewCreate) SetPrice(i int) *MenuReviewCreate {
	mrc.mutation.SetPrice(i)
	return mrc
}

// Mutation returns the MenuReviewMutation object of the builder.
func (mrc *MenuReviewCreate) Mutation() *MenuReviewMutation {
	return mrc.mutation
}

// Save creates the MenuReview in the database.
func (mrc *MenuReviewCreate) Save(ctx context.Context) (*MenuReview, error) {
	mrc.defaults()
	return withHooks(ctx, mrc.sqlSave, mrc.mutation, mrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mrc *MenuReviewCreate) SaveX(ctx context.Context) *MenuReview {
	v, err := mrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mrc *MenuReviewCreate) Exec(ctx context.Context) error {
	_, err := mrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mrc *MenuReviewCreate) ExecX(ctx context.Context) {
	if err := mrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mrc *MenuReviewCreate) defaults() {
	if _, ok := mrc.mutation.CreatedAt(); !ok {
		v := menureview.DefaultCreatedAt()
		mrc.mutation.SetCreatedAt(v)
	}
	if _, ok := mrc.mutation.UpdateAt(); !ok {
		v := menureview.DefaultUpdateAt()
		mrc.mutation.SetUpdateAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mrc *MenuReviewCreate) check() error {
	if _, ok := mrc.mutation.Etc(); !ok {
		return &ValidationError{Name: "etc", err: errors.New(`ent: missing required field "MenuReview.etc"`)}
	}
	if _, ok := mrc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "MenuReview.status"`)}
	}
	if _, ok := mrc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "MenuReview.created_at"`)}
	}
	if _, ok := mrc.mutation.UpdateAt(); !ok {
		return &ValidationError{Name: "update_at", err: errors.New(`ent: missing required field "MenuReview.update_at"`)}
	}
	if _, ok := mrc.mutation.Score(); !ok {
		return &ValidationError{Name: "score", err: errors.New(`ent: missing required field "MenuReview.score"`)}
	}
	if _, ok := mrc.mutation.Comment(); !ok {
		return &ValidationError{Name: "comment", err: errors.New(`ent: missing required field "MenuReview.comment"`)}
	}
	if _, ok := mrc.mutation.Cooltime(); !ok {
		return &ValidationError{Name: "cooltime", err: errors.New(`ent: missing required field "MenuReview.cooltime"`)}
	}
	if _, ok := mrc.mutation.Price(); !ok {
		return &ValidationError{Name: "price", err: errors.New(`ent: missing required field "MenuReview.price"`)}
	}
	return nil
}

func (mrc *MenuReviewCreate) sqlSave(ctx context.Context) (*MenuReview, error) {
	if err := mrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	mrc.mutation.id = &_node.ID
	mrc.mutation.done = true
	return _node, nil
}

func (mrc *MenuReviewCreate) createSpec() (*MenuReview, *sqlgraph.CreateSpec) {
	var (
		_node = &MenuReview{config: mrc.config}
		_spec = sqlgraph.NewCreateSpec(menureview.Table, sqlgraph.NewFieldSpec(menureview.FieldID, field.TypeInt))
	)
	if value, ok := mrc.mutation.Etc(); ok {
		_spec.SetField(menureview.FieldEtc, field.TypeString, value)
		_node.Etc = value
	}
	if value, ok := mrc.mutation.Status(); ok {
		_spec.SetField(menureview.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := mrc.mutation.CreatedAt(); ok {
		_spec.SetField(menureview.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := mrc.mutation.UpdateAt(); ok {
		_spec.SetField(menureview.FieldUpdateAt, field.TypeTime, value)
		_node.UpdateAt = value
	}
	if value, ok := mrc.mutation.Score(); ok {
		_spec.SetField(menureview.FieldScore, field.TypeInt, value)
		_node.Score = value
	}
	if value, ok := mrc.mutation.Comment(); ok {
		_spec.SetField(menureview.FieldComment, field.TypeString, value)
		_node.Comment = value
	}
	if value, ok := mrc.mutation.Cooltime(); ok {
		_spec.SetField(menureview.FieldCooltime, field.TypeInt, value)
		_node.Cooltime = value
	}
	if value, ok := mrc.mutation.Price(); ok {
		_spec.SetField(menureview.FieldPrice, field.TypeInt, value)
		_node.Price = value
	}
	return _node, _spec
}

// MenuReviewCreateBulk is the builder for creating many MenuReview entities in bulk.
type MenuReviewCreateBulk struct {
	config
	err      error
	builders []*MenuReviewCreate
}

// Save creates the MenuReview entities in the database.
func (mrcb *MenuReviewCreateBulk) Save(ctx context.Context) ([]*MenuReview, error) {
	if mrcb.err != nil {
		return nil, mrcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mrcb.builders))
	nodes := make([]*MenuReview, len(mrcb.builders))
	mutators := make([]Mutator, len(mrcb.builders))
	for i := range mrcb.builders {
		func(i int, root context.Context) {
			builder := mrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MenuReviewMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mrcb *MenuReviewCreateBulk) SaveX(ctx context.Context) []*MenuReview {
	v, err := mrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mrcb *MenuReviewCreateBulk) Exec(ctx context.Context) error {
	_, err := mrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mrcb *MenuReviewCreateBulk) ExecX(ctx context.Context) {
	if err := mrcb.Exec(ctx); err != nil {
		panic(err)
	}
}
