// Code generated by ent, DO NOT EDIT.

package storereview

import (
	"ilsan/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.StoreReview {
	return predicate.StoreReview(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.StoreReview {
	return predicate.StoreReview(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.StoreReview {
	return predicate.StoreReview(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.StoreReview {
	return predicate.StoreReview(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.StoreReview {
	return predicate.StoreReview(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.StoreReview {
	return predicate.StoreReview(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.StoreReview {
	return predicate.StoreReview(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.StoreReview {
	return predicate.StoreReview(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.StoreReview {
	return predicate.StoreReview(sql.FieldLTE(FieldID, id))
}

// Etc applies equality check predicate on the "etc" field. It's identical to EtcEQ.
func Etc(v string) predicate.StoreReview {
	return predicate.StoreReview(sql.FieldEQ(FieldEtc, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.StoreReview {
	return predicate.StoreReview(sql.FieldEQ(FieldStatus, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.StoreReview {
	return predicate.StoreReview(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdateAt applies equality check predicate on the "update_at" field. It's identical to UpdateAtEQ.
func UpdateAt(v time.Time) predicate.StoreReview {
	return predicate.StoreReview(sql.FieldEQ(FieldUpdateAt, v))
}

// VisitDay applies equality check predicate on the "visit_day" field. It's identical to VisitDayEQ.
func VisitDay(v time.Time) predicate.StoreReview {
	return predicate.StoreReview(sql.FieldEQ(FieldVisitDay, v))
}

// Score applies equality check predicate on the "score" field. It's identical to ScoreEQ.
func Score(v float64) predicate.StoreReview {
	return predicate.StoreReview(sql.FieldEQ(FieldScore, v))
}

// Comment applies equality check predicate on the "comment" field. It's identical to CommentEQ.
func Comment(v string) predicate.StoreReview {
	return predicate.StoreReview(sql.FieldEQ(FieldComment, v))
}

// EtcEQ applies the EQ predicate on the "etc" field.
func EtcEQ(v string) predicate.StoreReview {
	return predicate.StoreReview(sql.FieldEQ(FieldEtc, v))
}

// EtcNEQ applies the NEQ predicate on the "etc" field.
func EtcNEQ(v string) predicate.StoreReview {
	return predicate.StoreReview(sql.FieldNEQ(FieldEtc, v))
}

// EtcIn applies the In predicate on the "etc" field.
func EtcIn(vs ...string) predicate.StoreReview {
	return predicate.StoreReview(sql.FieldIn(FieldEtc, vs...))
}

// EtcNotIn applies the NotIn predicate on the "etc" field.
func EtcNotIn(vs ...string) predicate.StoreReview {
	return predicate.StoreReview(sql.FieldNotIn(FieldEtc, vs...))
}

// EtcGT applies the GT predicate on the "etc" field.
func EtcGT(v string) predicate.StoreReview {
	return predicate.StoreReview(sql.FieldGT(FieldEtc, v))
}

// EtcGTE applies the GTE predicate on the "etc" field.
func EtcGTE(v string) predicate.StoreReview {
	return predicate.StoreReview(sql.FieldGTE(FieldEtc, v))
}

// EtcLT applies the LT predicate on the "etc" field.
func EtcLT(v string) predicate.StoreReview {
	return predicate.StoreReview(sql.FieldLT(FieldEtc, v))
}

// EtcLTE applies the LTE predicate on the "etc" field.
func EtcLTE(v string) predicate.StoreReview {
	return predicate.StoreReview(sql.FieldLTE(FieldEtc, v))
}

// EtcContains applies the Contains predicate on the "etc" field.
func EtcContains(v string) predicate.StoreReview {
	return predicate.StoreReview(sql.FieldContains(FieldEtc, v))
}

// EtcHasPrefix applies the HasPrefix predicate on the "etc" field.
func EtcHasPrefix(v string) predicate.StoreReview {
	return predicate.StoreReview(sql.FieldHasPrefix(FieldEtc, v))
}

// EtcHasSuffix applies the HasSuffix predicate on the "etc" field.
func EtcHasSuffix(v string) predicate.StoreReview {
	return predicate.StoreReview(sql.FieldHasSuffix(FieldEtc, v))
}

// EtcEqualFold applies the EqualFold predicate on the "etc" field.
func EtcEqualFold(v string) predicate.StoreReview {
	return predicate.StoreReview(sql.FieldEqualFold(FieldEtc, v))
}

// EtcContainsFold applies the ContainsFold predicate on the "etc" field.
func EtcContainsFold(v string) predicate.StoreReview {
	return predicate.StoreReview(sql.FieldContainsFold(FieldEtc, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.StoreReview {
	return predicate.StoreReview(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.StoreReview {
	return predicate.StoreReview(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.StoreReview {
	return predicate.StoreReview(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.StoreReview {
	return predicate.StoreReview(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.StoreReview {
	return predicate.StoreReview(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.StoreReview {
	return predicate.StoreReview(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.StoreReview {
	return predicate.StoreReview(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.StoreReview {
	return predicate.StoreReview(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.StoreReview {
	return predicate.StoreReview(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.StoreReview {
	return predicate.StoreReview(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.StoreReview {
	return predicate.StoreReview(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.StoreReview {
	return predicate.StoreReview(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.StoreReview {
	return predicate.StoreReview(sql.FieldContainsFold(FieldStatus, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.StoreReview {
	return predicate.StoreReview(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.StoreReview {
	return predicate.StoreReview(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.StoreReview {
	return predicate.StoreReview(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.StoreReview {
	return predicate.StoreReview(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.StoreReview {
	return predicate.StoreReview(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.StoreReview {
	return predicate.StoreReview(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.StoreReview {
	return predicate.StoreReview(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.StoreReview {
	return predicate.StoreReview(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdateAtEQ applies the EQ predicate on the "update_at" field.
func UpdateAtEQ(v time.Time) predicate.StoreReview {
	return predicate.StoreReview(sql.FieldEQ(FieldUpdateAt, v))
}

// UpdateAtNEQ applies the NEQ predicate on the "update_at" field.
func UpdateAtNEQ(v time.Time) predicate.StoreReview {
	return predicate.StoreReview(sql.FieldNEQ(FieldUpdateAt, v))
}

// UpdateAtIn applies the In predicate on the "update_at" field.
func UpdateAtIn(vs ...time.Time) predicate.StoreReview {
	return predicate.StoreReview(sql.FieldIn(FieldUpdateAt, vs...))
}

// UpdateAtNotIn applies the NotIn predicate on the "update_at" field.
func UpdateAtNotIn(vs ...time.Time) predicate.StoreReview {
	return predicate.StoreReview(sql.FieldNotIn(FieldUpdateAt, vs...))
}

// UpdateAtGT applies the GT predicate on the "update_at" field.
func UpdateAtGT(v time.Time) predicate.StoreReview {
	return predicate.StoreReview(sql.FieldGT(FieldUpdateAt, v))
}

// UpdateAtGTE applies the GTE predicate on the "update_at" field.
func UpdateAtGTE(v time.Time) predicate.StoreReview {
	return predicate.StoreReview(sql.FieldGTE(FieldUpdateAt, v))
}

// UpdateAtLT applies the LT predicate on the "update_at" field.
func UpdateAtLT(v time.Time) predicate.StoreReview {
	return predicate.StoreReview(sql.FieldLT(FieldUpdateAt, v))
}

// UpdateAtLTE applies the LTE predicate on the "update_at" field.
func UpdateAtLTE(v time.Time) predicate.StoreReview {
	return predicate.StoreReview(sql.FieldLTE(FieldUpdateAt, v))
}

// VisitDayEQ applies the EQ predicate on the "visit_day" field.
func VisitDayEQ(v time.Time) predicate.StoreReview {
	return predicate.StoreReview(sql.FieldEQ(FieldVisitDay, v))
}

// VisitDayNEQ applies the NEQ predicate on the "visit_day" field.
func VisitDayNEQ(v time.Time) predicate.StoreReview {
	return predicate.StoreReview(sql.FieldNEQ(FieldVisitDay, v))
}

// VisitDayIn applies the In predicate on the "visit_day" field.
func VisitDayIn(vs ...time.Time) predicate.StoreReview {
	return predicate.StoreReview(sql.FieldIn(FieldVisitDay, vs...))
}

// VisitDayNotIn applies the NotIn predicate on the "visit_day" field.
func VisitDayNotIn(vs ...time.Time) predicate.StoreReview {
	return predicate.StoreReview(sql.FieldNotIn(FieldVisitDay, vs...))
}

// VisitDayGT applies the GT predicate on the "visit_day" field.
func VisitDayGT(v time.Time) predicate.StoreReview {
	return predicate.StoreReview(sql.FieldGT(FieldVisitDay, v))
}

// VisitDayGTE applies the GTE predicate on the "visit_day" field.
func VisitDayGTE(v time.Time) predicate.StoreReview {
	return predicate.StoreReview(sql.FieldGTE(FieldVisitDay, v))
}

// VisitDayLT applies the LT predicate on the "visit_day" field.
func VisitDayLT(v time.Time) predicate.StoreReview {
	return predicate.StoreReview(sql.FieldLT(FieldVisitDay, v))
}

// VisitDayLTE applies the LTE predicate on the "visit_day" field.
func VisitDayLTE(v time.Time) predicate.StoreReview {
	return predicate.StoreReview(sql.FieldLTE(FieldVisitDay, v))
}

// ScoreEQ applies the EQ predicate on the "score" field.
func ScoreEQ(v float64) predicate.StoreReview {
	return predicate.StoreReview(sql.FieldEQ(FieldScore, v))
}

// ScoreNEQ applies the NEQ predicate on the "score" field.
func ScoreNEQ(v float64) predicate.StoreReview {
	return predicate.StoreReview(sql.FieldNEQ(FieldScore, v))
}

// ScoreIn applies the In predicate on the "score" field.
func ScoreIn(vs ...float64) predicate.StoreReview {
	return predicate.StoreReview(sql.FieldIn(FieldScore, vs...))
}

// ScoreNotIn applies the NotIn predicate on the "score" field.
func ScoreNotIn(vs ...float64) predicate.StoreReview {
	return predicate.StoreReview(sql.FieldNotIn(FieldScore, vs...))
}

// ScoreGT applies the GT predicate on the "score" field.
func ScoreGT(v float64) predicate.StoreReview {
	return predicate.StoreReview(sql.FieldGT(FieldScore, v))
}

// ScoreGTE applies the GTE predicate on the "score" field.
func ScoreGTE(v float64) predicate.StoreReview {
	return predicate.StoreReview(sql.FieldGTE(FieldScore, v))
}

// ScoreLT applies the LT predicate on the "score" field.
func ScoreLT(v float64) predicate.StoreReview {
	return predicate.StoreReview(sql.FieldLT(FieldScore, v))
}

// ScoreLTE applies the LTE predicate on the "score" field.
func ScoreLTE(v float64) predicate.StoreReview {
	return predicate.StoreReview(sql.FieldLTE(FieldScore, v))
}

// CommentEQ applies the EQ predicate on the "comment" field.
func CommentEQ(v string) predicate.StoreReview {
	return predicate.StoreReview(sql.FieldEQ(FieldComment, v))
}

// CommentNEQ applies the NEQ predicate on the "comment" field.
func CommentNEQ(v string) predicate.StoreReview {
	return predicate.StoreReview(sql.FieldNEQ(FieldComment, v))
}

// CommentIn applies the In predicate on the "comment" field.
func CommentIn(vs ...string) predicate.StoreReview {
	return predicate.StoreReview(sql.FieldIn(FieldComment, vs...))
}

// CommentNotIn applies the NotIn predicate on the "comment" field.
func CommentNotIn(vs ...string) predicate.StoreReview {
	return predicate.StoreReview(sql.FieldNotIn(FieldComment, vs...))
}

// CommentGT applies the GT predicate on the "comment" field.
func CommentGT(v string) predicate.StoreReview {
	return predicate.StoreReview(sql.FieldGT(FieldComment, v))
}

// CommentGTE applies the GTE predicate on the "comment" field.
func CommentGTE(v string) predicate.StoreReview {
	return predicate.StoreReview(sql.FieldGTE(FieldComment, v))
}

// CommentLT applies the LT predicate on the "comment" field.
func CommentLT(v string) predicate.StoreReview {
	return predicate.StoreReview(sql.FieldLT(FieldComment, v))
}

// CommentLTE applies the LTE predicate on the "comment" field.
func CommentLTE(v string) predicate.StoreReview {
	return predicate.StoreReview(sql.FieldLTE(FieldComment, v))
}

// CommentContains applies the Contains predicate on the "comment" field.
func CommentContains(v string) predicate.StoreReview {
	return predicate.StoreReview(sql.FieldContains(FieldComment, v))
}

// CommentHasPrefix applies the HasPrefix predicate on the "comment" field.
func CommentHasPrefix(v string) predicate.StoreReview {
	return predicate.StoreReview(sql.FieldHasPrefix(FieldComment, v))
}

// CommentHasSuffix applies the HasSuffix predicate on the "comment" field.
func CommentHasSuffix(v string) predicate.StoreReview {
	return predicate.StoreReview(sql.FieldHasSuffix(FieldComment, v))
}

// CommentEqualFold applies the EqualFold predicate on the "comment" field.
func CommentEqualFold(v string) predicate.StoreReview {
	return predicate.StoreReview(sql.FieldEqualFold(FieldComment, v))
}

// CommentContainsFold applies the ContainsFold predicate on the "comment" field.
func CommentContainsFold(v string) predicate.StoreReview {
	return predicate.StoreReview(sql.FieldContainsFold(FieldComment, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.StoreReview) predicate.StoreReview {
	return predicate.StoreReview(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.StoreReview) predicate.StoreReview {
	return predicate.StoreReview(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.StoreReview) predicate.StoreReview {
	return predicate.StoreReview(sql.NotPredicates(p))
}
