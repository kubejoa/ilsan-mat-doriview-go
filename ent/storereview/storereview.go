// Code generated by ent, DO NOT EDIT.

package storereview

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the storereview type in the database.
	Label = "store_review"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEtc holds the string denoting the etc field in the database.
	FieldEtc = "etc"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdateAt holds the string denoting the update_at field in the database.
	FieldUpdateAt = "update_at"
	// FieldVisitDay holds the string denoting the visit_day field in the database.
	FieldVisitDay = "visit_day"
	// FieldScore holds the string denoting the score field in the database.
	FieldScore = "score"
	// FieldComment holds the string denoting the comment field in the database.
	FieldComment = "comment"
	// Table holds the table name of the storereview in the database.
	Table = "store_reviews"
)

// Columns holds all SQL columns for storereview fields.
var Columns = []string{
	FieldID,
	FieldEtc,
	FieldStatus,
	FieldCreatedAt,
	FieldUpdateAt,
	FieldVisitDay,
	FieldScore,
	FieldComment,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdateAt holds the default value on creation for the "update_at" field.
	DefaultUpdateAt func() time.Time
	// UpdateDefaultUpdateAt holds the default value on update for the "update_at" field.
	UpdateDefaultUpdateAt func() time.Time
)

// OrderOption defines the ordering options for the StoreReview queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEtc orders the results by the etc field.
func ByEtc(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEtc, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdateAt orders the results by the update_at field.
func ByUpdateAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateAt, opts...).ToFunc()
}

// ByVisitDay orders the results by the visit_day field.
func ByVisitDay(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVisitDay, opts...).ToFunc()
}

// ByScore orders the results by the score field.
func ByScore(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScore, opts...).ToFunc()
}

// ByComment orders the results by the comment field.
func ByComment(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldComment, opts...).ToFunc()
}
