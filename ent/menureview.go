// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"ilsan/ent/menureview"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// MenuReview is the model entity for the MenuReview schema.
type MenuReview struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Etc holds the value of the "etc" field.
	Etc string `json:"etc,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdateAt holds the value of the "update_at" field.
	UpdateAt time.Time `json:"update_at,omitempty"`
	// Score holds the value of the "score" field.
	Score int `json:"score,omitempty"`
	// Comment holds the value of the "comment" field.
	Comment string `json:"comment,omitempty"`
	// Cooltime holds the value of the "cooltime" field.
	Cooltime int `json:"cooltime,omitempty"`
	// Price holds the value of the "price" field.
	Price        int `json:"price,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MenuReview) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case menureview.FieldID, menureview.FieldScore, menureview.FieldCooltime, menureview.FieldPrice:
			values[i] = new(sql.NullInt64)
		case menureview.FieldEtc, menureview.FieldStatus, menureview.FieldComment:
			values[i] = new(sql.NullString)
		case menureview.FieldCreatedAt, menureview.FieldUpdateAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MenuReview fields.
func (mr *MenuReview) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case menureview.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			mr.ID = int(value.Int64)
		case menureview.FieldEtc:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field etc", values[i])
			} else if value.Valid {
				mr.Etc = value.String
			}
		case menureview.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				mr.Status = value.String
			}
		case menureview.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				mr.CreatedAt = value.Time
			}
		case menureview.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				mr.UpdateAt = value.Time
			}
		case menureview.FieldScore:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field score", values[i])
			} else if value.Valid {
				mr.Score = int(value.Int64)
			}
		case menureview.FieldComment:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comment", values[i])
			} else if value.Valid {
				mr.Comment = value.String
			}
		case menureview.FieldCooltime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cooltime", values[i])
			} else if value.Valid {
				mr.Cooltime = int(value.Int64)
			}
		case menureview.FieldPrice:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				mr.Price = int(value.Int64)
			}
		default:
			mr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the MenuReview.
// This includes values selected through modifiers, order, etc.
func (mr *MenuReview) Value(name string) (ent.Value, error) {
	return mr.selectValues.Get(name)
}

// Update returns a builder for updating this MenuReview.
// Note that you need to call MenuReview.Unwrap() before calling this method if this MenuReview
// was returned from a transaction, and the transaction was committed or rolled back.
func (mr *MenuReview) Update() *MenuReviewUpdateOne {
	return NewMenuReviewClient(mr.config).UpdateOne(mr)
}

// Unwrap unwraps the MenuReview entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mr *MenuReview) Unwrap() *MenuReview {
	_tx, ok := mr.config.driver.(*txDriver)
	if !ok {
		panic("ent: MenuReview is not a transactional entity")
	}
	mr.config.driver = _tx.drv
	return mr
}

// String implements the fmt.Stringer.
func (mr *MenuReview) String() string {
	var builder strings.Builder
	builder.WriteString("MenuReview(")
	builder.WriteString(fmt.Sprintf("id=%v, ", mr.ID))
	builder.WriteString("etc=")
	builder.WriteString(mr.Etc)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(mr.Status)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(mr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_at=")
	builder.WriteString(mr.UpdateAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("score=")
	builder.WriteString(fmt.Sprintf("%v", mr.Score))
	builder.WriteString(", ")
	builder.WriteString("comment=")
	builder.WriteString(mr.Comment)
	builder.WriteString(", ")
	builder.WriteString("cooltime=")
	builder.WriteString(fmt.Sprintf("%v", mr.Cooltime))
	builder.WriteString(", ")
	builder.WriteString("price=")
	builder.WriteString(fmt.Sprintf("%v", mr.Price))
	builder.WriteByte(')')
	return builder.String()
}

// MenuReviews is a parsable slice of MenuReview.
type MenuReviews []*MenuReview
