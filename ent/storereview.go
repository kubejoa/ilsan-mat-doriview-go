// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"ilsan/ent/storereview"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// StoreReview is the model entity for the StoreReview schema.
type StoreReview struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Etc holds the value of the "etc" field.
	Etc string `json:"etc,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdateAt holds the value of the "update_at" field.
	UpdateAt time.Time `json:"update_at,omitempty"`
	// VisitDay holds the value of the "visit_day" field.
	VisitDay time.Time `json:"visit_day,omitempty"`
	// Score holds the value of the "score" field.
	Score float64 `json:"score,omitempty"`
	// Comment holds the value of the "comment" field.
	Comment      string `json:"comment,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*StoreReview) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case storereview.FieldScore:
			values[i] = new(sql.NullFloat64)
		case storereview.FieldID:
			values[i] = new(sql.NullInt64)
		case storereview.FieldEtc, storereview.FieldStatus, storereview.FieldComment:
			values[i] = new(sql.NullString)
		case storereview.FieldCreatedAt, storereview.FieldUpdateAt, storereview.FieldVisitDay:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the StoreReview fields.
func (sr *StoreReview) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case storereview.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sr.ID = int(value.Int64)
		case storereview.FieldEtc:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field etc", values[i])
			} else if value.Valid {
				sr.Etc = value.String
			}
		case storereview.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				sr.Status = value.String
			}
		case storereview.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sr.CreatedAt = value.Time
			}
		case storereview.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				sr.UpdateAt = value.Time
			}
		case storereview.FieldVisitDay:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field visit_day", values[i])
			} else if value.Valid {
				sr.VisitDay = value.Time
			}
		case storereview.FieldScore:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field score", values[i])
			} else if value.Valid {
				sr.Score = value.Float64
			}
		case storereview.FieldComment:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comment", values[i])
			} else if value.Valid {
				sr.Comment = value.String
			}
		default:
			sr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the StoreReview.
// This includes values selected through modifiers, order, etc.
func (sr *StoreReview) Value(name string) (ent.Value, error) {
	return sr.selectValues.Get(name)
}

// Update returns a builder for updating this StoreReview.
// Note that you need to call StoreReview.Unwrap() before calling this method if this StoreReview
// was returned from a transaction, and the transaction was committed or rolled back.
func (sr *StoreReview) Update() *StoreReviewUpdateOne {
	return NewStoreReviewClient(sr.config).UpdateOne(sr)
}

// Unwrap unwraps the StoreReview entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sr *StoreReview) Unwrap() *StoreReview {
	_tx, ok := sr.config.driver.(*txDriver)
	if !ok {
		panic("ent: StoreReview is not a transactional entity")
	}
	sr.config.driver = _tx.drv
	return sr
}

// String implements the fmt.Stringer.
func (sr *StoreReview) String() string {
	var builder strings.Builder
	builder.WriteString("StoreReview(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sr.ID))
	builder.WriteString("etc=")
	builder.WriteString(sr.Etc)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(sr.Status)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(sr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_at=")
	builder.WriteString(sr.UpdateAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("visit_day=")
	builder.WriteString(sr.VisitDay.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("score=")
	builder.WriteString(fmt.Sprintf("%v", sr.Score))
	builder.WriteString(", ")
	builder.WriteString("comment=")
	builder.WriteString(sr.Comment)
	builder.WriteByte(')')
	return builder.String()
}

// StoreReviews is a parsable slice of StoreReview.
type StoreReviews []*StoreReview
